// Code generated by go-bindata.
// sources:
// static/conf/app.ini
// DO NOT EDIT!

package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x5a\xcd\x73\xe3\x46\x76\xbf\xe3\xaf\x68\xd3\x71\x3c\x93\xe2\x87\x3e\x3c\x1a\x59\x63\x25\xa6\x48\x50\xc2\x8a\x5f\x06\x48\xc9\xe3\x29\x15\x06\x02\x9a\x24\x2c\x10\x8d\x41\x03\x92\xb8\x95\x43\x5c\x39\xe4\x9e\x6c\x25\x97\x1c\x92\x43\x2a\x55\x49\x36\xa9\xdc\x76\xb7\x2a\x27\x57\xee\xf6\xff\xe0\xf2\x6e\xfe\x8b\xfc\x5e\x37\x40\x82\x1a\x79\xd6\xbb\xc9\x96\x5d\x22\xd0\x1f\xaf\xfb\xbd\x7e\xef\xf7\x7e\xaf\x31\xef\xb3\xa1\x79\x61\xda\x4c\xfd\x19\x8c\xba\x56\xef\x25\x9b\x9c\x59\x0e\xeb\x59\x7d\xd3\x78\x9f\x8d\xfb\x66\xdb\x31\xd9\xa0\x7d\x6e\xb2\xce\x59\x7b\x78\x6a\x3a\x6c\x34\x64\x9d\x91\x6d\x9b\xce\x78\x34\xec\x5a\xc3\x53\xd6\x99\x3a\x93\xd1\x00\x8d\xc3\x9e\x75\xaa\x67\x1a\x2f\x58\x3b\x49\x58\xec\x2d\x39\xcb\x16\x5e\xc6\xe4\x42\xdc\x49\x26\x62\xc6\x6f\x79\xba\x62\x89\x37\x47\x47\x98\x45\xdc\x68\x8f\xc7\xee\xb0\x3d\x30\xd9\x31\x3b\x0d\x33\xee\x1d\xd1\x0f\x93\x3c\xbd\x0d\x7d\xce\xee\xc2\x6c\xc1\x3c\xe6\xe7\x09\x13\x33\x86\x6e\x48\xee\x2c\xbc\x18\xd3\x31\x2a\x9c\xb1\x95\xc8\x59\x9a\xc7\x2c\x12\xbe\x17\x45\x2b\xc3\x9e\x0e\xdd\xa9\x03\x6d\x8e\xd9\x3c\xcc\x30\xda\x84\x04\x9e\xb2\x5a\xc0\x6f\x6b\x75\x56\x4b\x52\x11\xd4\x98\x40\x43\xc6\x65\x86\x96\x80\xcf\xbc\x3c\x82\x2c\xa9\xc7\x28\x09\x30\x05\x6d\x08\xef\x86\xf1\x2a\xe5\x89\x90\x61\x26\xd2\xd5\x95\x61\x8f\x46\x13\x76\x6c\x38\x1d\xdb\x1a\x4f\xdc\xc9\xcb\x31\x0d\xbb\xf6\xe4\x02\xe3\x68\xcf\x3c\xbd\x32\xc6\xf6\x68\x32\xea\x8c\xfa\xe8\x59\x64\x59\x62\x74\x47\x83\xb6\x35\xc4\x9b\xda\xe3\x42\xc8\x4c\x89\x71\xa7\x36\x0d\xf9\xe0\x49\x39\xfe\xa9\x3c\x6a\xb5\x3e\x78\xa2\x87\xe3\xe5\x83\x27\x67\x93\xc9\xd8\x1d\x8f\xec\xc9\x53\xd9\x32\xd4\x4b\xbb\xdb\x85\x6a\xc6\xba\x03\x02\xf6\x77\x76\x76\xa0\x67\x37\x94\xde\x75\xc4\x99\xe3\x9c\xb1\x19\xf7\xb2\x3c\x85\xf5\x16\x3c\x66\xb1\xc8\x98\x77\xeb\x85\x11\x75\x1b\x5d\xcb\x69\x9f\xf4\x4d\x97\x86\x1d\xb3\x99\x17\x49\x6e\xe0\xb9\x14\xb6\xb7\x57\x11\xd5\xe9\x0e\xe9\xbc\x62\x16\xc6\xa5\xe1\x96\x22\xe0\xc6\xa8\xd7\xeb\x5b\x43\xb3\xb4\x92\x16\x52\x0a\xb6\x47\xd3\x89\x69\xbb\xfd\xd1\xe9\xba\xeb\x05\x3b\xe5\x31\x4f\xbd\x8c\x33\x99\xf1\x44\x1e\xa1\xe5\x8f\x98\x1f\xc0\x0d\xb2\x45\x2b\x13\xad\x39\x1d\x7c\xcb\xcf\x65\x26\x96\x2d\xb2\x99\x54\x23\x9a\xba\x83\xf9\x3c\xcd\x58\xc3\xf7\x8e\xb3\x34\xe7\xac\x11\xe4\x10\x15\x8a\xf8\xf8\xf0\xf9\xc1\xce\x62\x67\xb9\x23\x59\x83\xac\x7a\xbc\x5c\xd1\x4f\x93\xdf\x7b\xcb\x24\xe2\x4d\x5f\x2c\x8d\x17\x10\x34\x4a\xd9\x2c\x15\x4b\xb8\x51\x33\x99\xdd\xb3\x59\x08\xd5\xf8\x7d\x22\xd2\x8c\x07\xba\x07\x1e\xc2\x2e\xc3\x38\x20\x1f\xa5\xc5\xc2\x59\xe8\xeb\xdd\x0a\x58\xf1\x49\x20\x20\x85\xcc\x38\x13\xe9\x9c\x67\x2c\x13\xc5\x7c\x35\x31\x49\xc3\x5b\x1a\x7c\xc3\x57\x4f\xb5\x66\x22\xe1\xb1\x94\x11\x4b\x6e\x7c\xb9\xbb\xc7\x1a\x30\x1f\x49\x55\xab\x37\x44\x9e\x15\x6f\x7c\xc9\x1a\xb1\xc0\x34\xf9\xe3\x66\x61\x64\x39\x89\x3a\x24\x3d\x04\x5c\x1a\x1d\xd3\x9e\xb8\x14\x76\x30\x78\xd5\x86\xad\x72\x19\xe3\xdc\x7c\xf9\xe8\x80\x42\x22\x96\x9f\x26\x09\x82\x24\xc2\x69\x47\x3a\xd0\x60\x41\x52\xca\x8b\x03\x58\x01\xe6\xf6\xb5\xdd\xe8\xc4\x30\xbc\x12\x34\xca\x04\x68\x25\x67\x83\xb1\x54\x0c\x53\x3b\xbf\xe7\x7e\x0e\x0b\x1b\xce\xa4\x3d\xb1\x3a\xae\x72\xf9\x71\x7b\x42\x6e\xa7\x25\xb6\x34\x4a\x44\x64\x6b\x1c\x67\xb1\xfa\xe9\x17\xd6\x98\xc9\x3c\x21\xfb\x1a\xe6\x50\xf9\x94\x6a\xdb\x78\x53\x1f\xbb\x0a\xe3\xb9\x46\x11\x9c\x09\xce\x26\x6e\x44\x62\x3e\xc7\x79\xe6\x88\x42\x59\x67\xbe\x17\xb3\x6b\xce\x6a\x0b\xb1\xe4\x3a\xdc\x71\x62\x11\x4e\xb3\x66\xf4\xdb\x0a\xb6\xb0\x97\x53\x32\x08\x8d\x40\xf0\x06\x5e\xe6\x21\x8e\xf9\x55\x05\x32\x96\x2b\xf9\x26\x52\xa0\x01\xb7\x9a\xa7\x5c\x6a\x49\x68\x84\x92\xfb\xe8\x08\xb3\x0f\x25\x21\x50\xca\xfc\x85\x00\x5c\x19\xdd\x93\x12\x13\xd4\x5c\xe3\x6c\xe4\x50\x54\xed\xee\x3d\x6f\xee\xe0\xbf\xdd\xa3\xfd\xfd\x9d\x03\xa3\x80\x3b\xe5\xdc\x46\x01\x56\xa9\x10\x99\x31\x6e\x3b\xce\x65\x17\xf1\xfd\x82\xf5\x68\xa5\xca\xba\x71\xb4\xaa\x33\x5e\x62\x99\x0e\x50\xda\x5a\xca\xdf\xe4\x61\x5a\xe8\x08\xf8\x09\x67\xab\xc6\x2c\x8f\xa2\x1a\xa2\xba\xbf\xc6\x31\x3d\xbe\x14\x5b\x2a\xa0\xa4\x1a\xc5\x99\x90\x01\x74\xbc\x35\x83\x6b\x18\xc4\x0b\x96\x61\x7c\xa5\x60\xcd\xcf\xd3\x30\x03\xf8\x59\x43\x9c\x65\xbf\x8f\xd8\xee\x9c\x57\x8e\xe3\xbd\xf7\x74\x6a\xd0\x99\x63\x32\x62\xe7\xa6\x39\x66\x2f\x47\x53\x9b\x29\xe5\xba\xed\x49\x9b\x39\xed\x9e\xf9\xde\x7b\x86\x63\x76\x6c\x73\xe2\xc2\x21\x21\xe0\xbd\xf7\x3f\xed\x75\xcd\x4b\x1b\xff\xff\xf1\x9f\x3c\x21\x6f\xc8\x33\x41\x07\x09\xd7\x4f\xf9\x92\x2f\xaf\xa1\x6c\xe0\x21\x3e\x80\x26\xd6\xd0\xb5\xcd\x81\x39\x38\x01\xb8\x74\xdb\x2f\x1d\xcc\x7f\x6e\x74\x46\xa3\x73\xcb\x54\x80\x5f\x35\xaa\xeb\xdd\x71\x49\xe7\x5a\xf4\xaf\x27\x6e\x0d\x0a\x63\x3f\xe5\x41\xa8\x0d\x63\x53\x62\x92\x14\xcd\xe2\x7e\xc5\xbc\x1c\x86\x8e\xb3\xd2\x33\x17\xdc\x0b\xb0\x15\x95\xce\x10\x1d\xe4\x63\xea\xc5\xb0\x29\x71\x3a\xa6\x0b\x08\xff\xfc\xa5\xdb\x9e\x4e\xce\xcc\x21\x9c\x1d\x0e\x3f\x5a\xa7\xa1\xcf\x1b\x97\xe6\x09\x75\x35\xa8\xa1\xc8\x13\x70\x96\x2b\xa3\xdd\x99\x58\x17\xa6\xdb\xc1\x21\xb9\x7d\x7a\x1a\x58\x43\x80\x27\xa9\xb6\x7b\xb8\x03\xe1\x8e\x49\x21\x43\x3e\xf1\x83\x83\x10\xba\x6a\x37\x1c\xbe\x0f\x5c\xf2\x45\x3c\x0b\xd3\x25\xe3\x8d\x25\x10\x5f\x05\x47\xca\xe7\xa1\xcc\x34\x64\x42\xe6\xa9\xe5\x10\x3e\x9b\x48\x32\x7d\x57\xe5\x6c\x7b\x50\x39\xcc\xae\xe0\x52\xa7\x8c\x28\x12\x77\xc5\x64\x2c\x40\x40\xa0\x5c\x82\xc1\x68\x0a\x19\x7c\x5f\xe4\x71\xa6\x7d\x68\x0d\xfe\x4a\xbc\xad\xf4\xaf\x08\x55\x5b\x5c\x02\x79\x98\x0c\xe7\x2a\x9d\x60\xab\xb7\x21\xbf\x83\xd8\x55\xb6\x40\x2c\x37\xb1\xb3\xcf\xa6\x96\x8d\xc4\x64\x9d\x0e\x71\xd6\x17\x96\x79\x59\x91\xd0\xf1\x7c\xe0\x0c\xd2\x58\xe6\x61\x2f\x92\x25\xa1\x4f\x19\xae\x04\x88\x4e\xbb\x73\x66\xba\xed\x0b\x78\x9a\x5d\x99\x35\x20\x1b\x40\x19\x8d\xe7\xa4\x7f\x31\x7e\x38\x9a\x80\xea\xb8\x64\x83\xea\x70\x42\xfb\x80\x67\x98\x75\xa4\x52\x37\x25\x64\xf8\xca\x22\xbf\xa6\x64\xd2\x9a\xc3\x33\x33\x49\x3f\xb2\x15\x4a\x99\x73\xd9\xda\x3d\x78\x56\xca\x7c\x97\x2f\xac\x17\xf9\xa1\xb1\xa3\x1f\x32\x5d\x57\xa8\xd3\x80\xf6\xfe\x0d\x83\xf9\xc3\x65\xbe\xa4\x4c\x00\x4b\xfe\xb4\xa0\x47\xbe\x48\x81\x11\x89\xd0\xa0\x98\xad\x92\x4d\x32\x86\xaf\x58\x83\xe9\x80\xe2\x0d\x86\xfd\x02\x86\x3a\x33\x2b\xb1\x6b\xbc\xba\xe3\xd7\x0b\x21\x6e\x08\xf5\xce\xf0\xcb\x32\x4f\xde\xb0\x37\x39\x47\x9e\x8d\x78\x3c\x07\xd8\x7f\x36\x35\xa7\xf0\x3c\x73\x78\xaa\x60\x62\xb7\x60\x1b\x3c\x0a\x11\x30\xe0\x70\x4b\x4e\xb9\x09\x47\x0a\x9c\xc0\x16\xa4\xd1\x35\xc9\x4d\x6d\x77\x62\x0d\x4c\x70\x01\xcc\x79\x46\xa1\xad\xdc\x29\x8c\x15\x9a\xf0\x4a\x96\xa5\x53\x71\xce\xad\xb1\x3b\xe9\x3b\x2e\xe6\x11\x05\xdd\xec\x8f\xbc\x98\x38\x95\xb6\x5b\xb7\x62\x98\x93\x7c\x36\x53\x29\x8b\x76\x49\x51\xe9\x83\x16\xc6\x3c\xaa\xc3\x3a\x3c\x21\x76\x08\x37\x09\x55\x8a\x2a\x68\x62\x20\xe2\x0f\x91\x45\x63\xec\xe3\x8e\x38\xa9\xea\x6c\x02\x92\x86\x5d\xf7\x64\xda\xeb\x11\x6b\x31\x87\x4a\x47\xc8\x1f\x52\xb0\x03\x38\x91\x07\x57\x88\x2d\x28\xa8\x22\x4a\x93\x56\x67\x7a\xf2\x13\xb3\x33\x51\xf4\xad\x24\xb0\x4f\x65\xe9\x71\x9a\x08\x12\xed\x59\x2a\x57\x92\xcb\x2c\x69\xce\xe9\x99\xdc\xe8\xe8\xd9\xe1\x73\xf4\x7d\xf6\x59\xd1\xf1\xe6\x8d\x6a\xdd\x23\x2b\x0d\x45\xc6\xeb\xb4\x5f\x95\x55\x89\x61\x70\x98\x54\x1f\x73\xed\xa3\x83\x67\x40\x7c\x67\x30\x19\x3b\x68\x89\x22\x4a\x70\x80\xa2\xa0\x89\xf8\xa2\x93\x07\x38\xdb\x13\x58\x91\x68\xb6\x9a\x8b\x85\x48\xfd\x14\x07\xb3\x5c\x42\x10\xd4\xa0\x2c\x6f\xf7\x3a\xec\xe0\xa3\x9d\x8f\x9b\xcc\xd2\x0b\xe9\xfd\x96\x49\x57\x6e\x04\xc1\x42\x6a\x21\x2f\xba\x03\x0a\xaf\xd7\x2b\xd2\x5a\x85\x29\x9e\x99\xfd\x11\x11\x18\x8d\x32\x9a\x77\x12\x17\x53\x88\xe9\x51\x54\x85\x74\x5a\x80\xd4\xe6\xda\x37\xd5\x9c\x63\x46\xc1\xad\x38\xc9\x66\x02\xa1\xd6\xb6\xc4\x2d\x9a\xae\x28\x9b\x5c\x01\x96\x96\xd8\x0a\xc6\xb9\xb4\x9f\x02\xda\x37\x21\xa3\x93\xa1\x52\xb0\xca\xe9\x44\x55\xe7\x26\x1b\x01\xbe\x48\x2b\x34\x92\x68\xac\x2c\x79\x34\x6b\x10\x4e\xc1\x5c\x95\x89\x52\x7b\x69\xe9\xa1\x1a\xd5\x98\x1f\x85\x50\xaa\x3a\x8e\x12\xba\x4b\x94\xcc\xea\x51\xf0\x6f\x08\xf2\x23\x34\x4d\x7b\xf7\xbb\x78\x5a\x31\x62\x43\xd4\x94\x83\x69\x3a\x1b\x04\x08\x7b\x70\x1d\x3a\xcf\x67\xfb\x7b\x7b\x4d\x36\x21\x1d\x0a\xea\xf3\x25\xc1\x2d\x1e\xb9\x72\xdb\xf5\x60\x28\x48\xea\xd7\xc8\xbd\x6b\xec\x13\xd5\xfb\x69\x85\x31\xff\x29\xd9\x60\xe9\x65\x46\xcf\x46\x4d\x77\x5c\xac\x08\xef\x58\x27\x3d\x95\x0a\x12\x4f\xca\x3b\x91\x06\x05\x7d\xd9\x30\x17\xe3\x95\xa0\xe4\xf9\x76\xc4\x16\x1d\x4d\x8d\xa7\x6f\xf7\x77\xfa\x16\xf0\xd2\xb5\x48\x48\xf1\xac\xc9\x82\x2a\xb7\x46\x63\x95\xf1\x4a\x50\xf6\x92\xb0\x59\x01\x66\xda\x9b\x41\x88\x5b\xd4\x54\x8f\x60\xb7\x62\x15\x2d\xb5\x85\x16\xfd\x11\x29\xf0\xd3\x98\x8c\xce\xcd\xe1\x8f\x9c\xe4\xfb\x30\xa0\x9b\x81\xb0\xc7\x86\x2a\x69\xb2\xf2\xf4\xc3\x40\xf3\x64\x8e\xd4\x98\xa9\xc3\x41\x7f\x29\x0e\xa0\x28\x05\x6c\x1b\x10\xbb\x25\x87\x96\xcd\xb9\x10\x73\x6d\xed\x16\xe8\xc6\x97\xdc\xcf\xd6\xc6\x51\x3d\xff\x47\xe3\xdc\xdd\xdd\x15\x82\x60\x26\xa9\x96\x51\x1a\x90\x95\xc2\x78\x26\x9a\xda\x25\x7e\xf4\x70\xec\x91\xb8\xff\x63\x06\x2e\x48\xc0\x96\x4a\x42\x1b\x6c\x4f\x49\x79\xd4\xc2\xef\x9c\x55\x18\xb8\x30\xc8\x9b\x37\xbf\xa7\x31\x50\xa7\xb9\xa4\x81\x4b\x2a\x28\xb8\x65\xdf\xfd\xea\xaf\x7f\xf3\xd5\xcf\x1e\xf5\x93\xd4\x4b\x16\x05\x10\x17\xfb\x68\xee\xfc\x36\x37\x79\x74\xce\xf6\xee\xef\x78\x78\x2d\x7e\x4f\x05\xc0\xbf\x1e\xb5\x38\x3c\x5f\x89\xad\xac\xfb\x5b\x76\xfa\xf8\x94\x2d\x77\x7e\xe5\x13\xbf\xda\xaa\x7d\xf8\x52\xa4\x2b\x5d\x61\x20\x0b\xd6\x14\x72\x50\xab\x1a\xf9\xe0\xde\xa4\x18\x6c\xb4\xbb\xed\xf1\x44\x91\x5e\xdd\x52\x16\x1c\x45\x7f\x51\xc5\x9c\x76\x90\x4d\xc1\x29\x6f\xbd\xa8\xc2\x1b\xb6\x24\x1e\xec\xa0\xd8\x80\xa4\x8b\x36\x29\x72\xb0\x53\x0a\xd2\x7b\x51\xd1\x56\xdd\x0b\x04\xc4\x88\x22\x45\xd5\x05\xc1\x9e\x46\x3b\xcc\x52\x13\x8e\x40\x8f\x33\xa0\xd5\xcd\x71\xe6\x27\x75\xea\x3c\x3e\x3a\xd8\x7f\xfe\x71\xbd\x44\xb1\xe3\xa5\xe7\x7b\x29\xd2\x4c\x70\x7d\xbc\x53\x4f\x84\x88\x5c\xa2\x57\xc7\x20\x3b\xf5\x30\x88\xb8\x5b\xd0\x9c\x63\xcd\xb8\xcb\x95\x8f\xd8\xeb\x4d\x65\xb7\xbb\xbb\xb7\xbb\xfb\xba\x4c\x8d\xc4\xf2\xa5\xc4\x86\x1e\xb7\x29\xc5\xd3\xc6\xb6\xda\xb4\x45\xb1\xf9\x98\x5d\x41\x13\x2f\xac\xee\xb6\x61\xc7\xa9\xb8\x0d\xa9\x2a\x51\x94\x7f\x8e\x5c\x49\xfa\x4b\xbd\x3d\x0c\x39\x52\x49\x70\xe1\xdd\x12\x60\xaf\xca\x51\x2b\x4e\x77\x62\xb4\x3c\xd8\x87\xde\xe1\xa6\xb0\x47\x81\xd9\x9c\x37\xd9\x6b\x55\x0a\x16\xbd\xf2\xf5\x1f\xcc\x8a\xa4\xf0\x11\x9b\x8b\x06\x7e\x1b\x41\x4a\x7c\xb2\xa5\x1a\x59\x20\xe3\x72\xc3\xa8\x5c\xc0\x6d\xca\x9d\x51\x95\x7c\x54\xae\xf7\x69\xb9\x47\x37\x23\x12\xf2\x7a\x6d\x26\xb7\xb8\x8a\x2c\x8a\xda\x52\x13\xac\xe9\x14\x2a\xfb\xe0\xba\x21\xd7\x35\x5c\x51\x23\x16\xfc\x21\x74\xa3\xf0\x86\xbb\x9a\xea\x63\x86\xa5\xb9\x23\x31\x84\xd2\x5e\xf0\x59\x15\x5a\x85\x3b\x57\x99\x89\x0e\x6f\x2d\x10\x21\x3d\xb5\xcd\x0a\x63\x35\x63\xc5\x95\x24\x25\x0e\xb5\xfe\xd6\x5c\xba\xdb\x2a\xcb\x03\xaa\xfb\xb4\x14\x4c\x57\x1d\x9b\xad\x23\x7a\xc8\x8e\xeb\x10\xda\x12\x72\x08\x5e\xb7\x63\x9c\x76\xdc\x32\x7a\x14\x0b\x87\x10\xdd\xb1\x91\x12\x85\x33\xae\xe4\x3c\x32\xdd\x31\x1d\x87\xea\xd7\xbe\xd5\x33\xb7\xe7\x1b\xaf\x8a\xba\x8b\xbc\x7a\x42\x14\x35\xf2\x7c\x4e\xc5\x5c\xd1\xae\x0c\xbe\xb9\xa7\xd0\x24\x4b\xfb\xf7\x1b\xd4\x2e\xf9\x03\xff\x2e\xfa\xb1\xa2\x7d\x61\x75\x68\x9d\x82\x3a\xeb\x4a\xce\x9d\x8e\xfb\xa3\x76\xd7\xad\xde\x50\xe8\x12\x50\xaa\x6b\xe0\x30\xe6\x92\xeb\x1b\x1f\xc5\x7a\x7c\x94\x32\x68\xa8\x05\xb9\x90\x8b\x5c\xd4\x8c\x53\xbb\x10\xe4\x8c\xa6\xb6\x92\x0f\xd4\x56\x02\xd6\x2c\xb4\x1c\x52\xe1\x29\x5e\x96\x21\xba\x41\x98\x33\x52\xf3\x72\xc1\x95\x32\x9b\x56\xa9\x18\x2d\x57\xa7\x09\xf2\xdd\xd5\x0a\x49\x32\xc3\x6b\x3a\xac\xd7\xc5\x31\x6e\xce\x6e\x4c\xf7\x63\xc4\x2d\x2b\x42\x1e\x4c\xd4\xca\x6d\xba\x5f\x6f\xdd\xcb\x54\x3a\xe8\x42\x33\xe6\x64\xd2\x25\x95\xab\xaa\x4c\xa7\xda\x1f\x65\x9f\x2c\xc2\x24\x5c\x7a\x73\xde\xfa\x32\xe1\xf3\x3f\xd7\x8f\x49\x3c\x37\xda\xfd\xfe\xe8\xd2\xec\xaa\xfb\x29\xca\x2f\x8f\x0e\x22\xb6\x77\xaf\x4b\x4b\xf0\x64\x8e\x35\x15\x3a\x6c\xef\x75\x7f\x6f\x70\x62\x0c\xda\x9f\xab\x8a\x92\x2e\xa0\xf7\x8a\x79\x71\xae\x6e\x6c\x30\x93\x26\x49\x55\x6c\xe4\x49\x24\xbc\x07\x56\x42\x7d\x45\xd3\x89\xe9\x3a\xba\xdc\x32\x5e\x91\x2f\x92\xb9\x9d\x84\xfb\x60\xd2\x5c\x5f\x2c\x6a\x2e\xaa\x4c\x47\x97\x5a\x2b\x06\xf8\x48\xe8\x56\x91\xcc\xc2\x1f\xd8\x10\x3c\x18\x20\xbc\x5f\x0a\x41\x76\x29\x2a\x1a\x0c\x47\xa0\xa0\x5c\x57\x07\xd7\x1e\x3a\x56\xa7\xce\xa6\x71\x78\xdf\xf5\xa8\xdc\xb2\xf3\xeb\x55\xf1\xd4\xeb\x1c\xee\xed\x95\xbf\x5f\xe8\x87\x67\x3b\xf5\x52\xf4\xfa\x41\x77\xed\xef\xef\x7f\xbc\x7e\x18\x7a\xb1\xa8\xb3\xf3\x30\x43\x62\x40\xbd\xe2\x64\xa0\xd4\xc5\xcf\x00\x35\x54\xb8\x7e\xf6\x53\xa1\x12\x98\x7a\xa5\x59\x45\x72\x53\xc7\x49\x6c\x85\x54\xa6\x18\xf5\xae\xa9\xb2\xae\x98\x41\x72\xae\x90\x87\xd8\x87\x88\xbc\x78\xde\x14\xe9\xbc\x95\xdc\xcc\x5b\x64\xbd\xd6\xfb\x78\x6a\x10\xdd\xcc\x3c\xf2\x93\xde\xc8\x1e\xb4\x75\x2e\x02\x8f\xd5\x9f\x2e\x8a\x50\xaa\xe4\xa4\x82\x9e\x56\x93\x12\x65\x53\xfa\xa5\xea\x54\xc7\x6e\x79\x39\xfa\x20\x7c\xcb\xb9\x65\x2d\x84\x2a\xd3\xa3\x83\x90\x3c\xf1\xd4\x6d\xff\x12\x23\x43\x14\x16\xea\xb3\x41\xe9\x9d\xe5\xb4\xba\xf2\x92\x9a\x51\xdc\x51\x16\xad\xff\x9f\x95\xfd\x83\xa2\x5e\xdf\x5c\x94\x8a\x4f\x52\x40\x17\xa9\xd9\xe5\xd7\xf9\x9c\x1e\x2c\xd8\x9e\x7e\x2f\xbd\x54\xe9\x6f\xa6\xa9\x48\xe9\xa1\x93\x86\x74\x15\xf8\x30\x3b\x6b\x09\x46\xdf\xbc\x30\x89\xa5\xa8\x57\xa3\x64\x2a\xa5\x6d\x94\xea\xfa\x92\x8c\x8e\xa1\x59\xb4\x5f\x95\xd3\xd6\x13\x94\x31\x1e\x8e\xa6\xc6\xcd\xd0\x17\xba\xc0\xd3\xc8\x23\xe9\x92\x52\xc0\x2d\xe0\xdd\x18\xca\x52\x91\xe1\xf9\x89\xbc\x23\x0f\x54\x31\x28\x08\x1a\xe8\x62\xa0\xa0\x06\x4f\xdf\xce\x37\xfd\xd1\xa9\x6b\x8f\x26\xba\x4c\x2d\xc0\x8a\x22\x39\x02\xb4\x56\xc2\x99\xae\x17\x70\x8a\xb4\x9b\x2d\x19\xca\xa6\x3b\x3a\x9a\xe9\x8b\x90\x53\xda\x59\x59\x7a\x0d\x25\x72\x11\xce\xb2\x77\xc9\xd9\x3b\x04\x69\xf1\x62\x08\x64\x9f\x7c\x82\xb7\x3a\xdb\x7b\x76\x50\x01\x19\xd7\x39\xb3\x7a\xea\xf3\xd4\xa1\xca\x61\x73\x42\x42\xa5\x75\x80\x4a\x66\xf5\xb6\x5e\xdd\xb6\xd5\x7f\xf9\x96\x66\xe6\x7d\x12\xa6\x0a\x3b\x56\x92\xb6\x43\x02\x68\x2f\x4f\x02\x1e\x71\xba\xd2\x9c\xd1\x4d\xe7\x12\xdb\xa6\x11\xdb\xe6\x7a\xae\x36\xb3\xbe\x78\xae\x1c\x73\xfc\xd8\x19\xc7\xd5\x53\xb3\x79\x41\x50\x35\x3b\x25\x34\xd3\x9f\x41\x0b\x7b\x2c\x91\x94\x81\xc0\x8f\x50\x09\xdb\x04\x95\x19\x9a\x9d\x89\x8b\x7c\x3c\x70\xaa\x9f\xd4\x26\x98\x8f\x58\x4b\xd7\xb2\xd5\xa5\x4b\x85\x09\x43\x48\x84\xe5\xde\x25\xb5\x4a\x4e\x8a\xb0\x00\xb7\x23\x97\xcf\x81\x8e\x3a\xf6\xf3\x20\x79\xe0\xf7\x34\xa4\xfa\x91\x13\xef\xea\xfa\xb0\x42\xbc\x8b\xcf\x94\xeb\x0f\x0e\x0a\x49\x1e\x58\x89\x1a\xab\x56\x7a\xd7\x85\xdb\xf6\x06\xba\xa1\x37\x8f\xb1\x5c\xe8\x97\xa6\x2b\xee\x84\x88\x3c\xd4\x2a\x97\x73\xef\x1c\xf8\xe0\xb6\x6e\x7d\xa7\xf5\xbb\xdd\x77\xa8\xd3\xe5\xc4\x5d\x37\x5f\x9d\xc4\x26\x3f\x17\x98\xf7\xaa\xb6\x5b\xbd\x64\xa9\xd5\x6b\x7b\x5b\xef\x57\x74\x26\x26\x5d\x9b\x3a\x15\xb3\xad\x61\xf7\xa1\xe9\x36\x1f\xab\x36\xe6\xdb\xfe\x68\xc5\xb6\x3e\x1f\x19\x5d\x9b\x64\xab\x71\x27\x98\x17\xd0\x15\xe1\x3d\x92\x8a\xde\xde\x91\xfa\xfa\x74\x44\x7f\x3e\x5d\x7f\xa3\xd6\xdf\x82\xfe\x0c\xd8\x9b\x82\xb1\x1e\xe7\xd9\xec\xd0\x20\xb7\x51\x09\x05\x7d\x57\x2a\x20\x4e\xad\x89\xdb\xb5\x7a\xbd\xed\xf0\xa7\xfb\xde\x74\x9e\x6b\xb2\x44\xee\xae\x52\x03\xcc\xf8\x21\x26\xb2\xb9\xff\x61\xb9\x6e\xad\xd1\xf0\xe6\xb4\x45\x09\x0b\x32\xbc\x00\xd2\x28\x9d\x50\xa6\x53\xf9\x50\xc4\xeb\x8c\x17\x66\x0d\xe9\x2f\x55\x0d\x1b\x08\x5f\xaa\x86\xb9\xdf\xda\x6d\x3e\x6f\x3e\x23\xca\xdb\xb6\x4f\x0b\xe3\xd1\x3f\x20\x58\x70\x2f\xa2\xbb\x71\xba\x37\x6f\xaa\x0d\x37\x67\xd2\xbf\xb9\x7a\x8b\x9b\x99\xea\x3b\xa5\xe6\xf5\x9b\xa2\x74\x21\xf2\x74\x43\x2f\x14\x46\x7d\xd4\xac\xd6\xa4\x7b\x1f\xbd\x5b\x49\x5a\xac\xaa\x66\x1e\xa7\x44\xa7\x54\x05\xd0\x68\x64\xde\x5c\xfe\x2e\x7a\x92\xb4\x42\xd3\x52\xcd\x57\xe1\xee\x21\xa1\x4c\x7b\x48\xef\x48\x0a\x8d\xa9\x53\xff\xe9\xa2\xd1\x19\xd2\xdf\xb3\xf3\x7a\xc0\x1b\x5d\xb3\x3e\x4b\x1b\x3d\xbb\x1e\x47\x8d\x61\xbf\x1e\xdd\x36\xfa\x17\xf5\x34\x6f\xd8\xd3\xfa\x97\x5e\xe3\x27\xe3\x3a\x97\x0d\xd3\xa9\x27\x59\xe3\xc4\xae\x27\x51\x63\xdc\x57\xdf\x26\x49\x9e\x09\x64\x0a\xe5\xa2\xfe\xeb\x7f\xff\x8b\xef\xfe\xeb\x6f\xbe\xfb\xc5\xcf\xbf\xff\xdb\xbf\xaa\xff\xfa\x97\x5f\xfd\xcf\xbf\xfe\xac\x78\xe9\xf2\x3c\x93\xfe\xa2\xde\x4b\xbd\xf8\xeb\x7f\xf6\x42\x59\x1f\x72\xd4\xa3\xe0\x25\x28\xe6\xfb\x5e\x76\x1b\xf2\xff\xfe\xc7\xbc\xfe\xcd\x3f\x7c\xfb\x97\xdf\x7e\xf5\xed\x57\xdf\xfc\xea\x9b\x5f\x7c\xf3\xcb\xfa\xf7\x7f\xf7\x4f\xdf\xff\xfd\xbf\xfd\xe6\x3f\x7e\x5e\x37\x65\xe2\x7d\xfd\x9f\x22\xaa\x8f\x41\xd1\xf2\x79\xfe\xf5\xbf\x48\x3c\x46\xf2\x26\xa4\xfb\x13\x72\xe6\x2b\xc3\x39\x1b\x5d\xba\x3d\x10\x17\xa4\xf1\x13\x5b\x7f\xb8\x5d\x83\xd6\xff\x06\x00\x00\xff\xff\x2d\x2e\x31\xed\xbd\x22\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 8893, mode: os.FileMode(420), modTime: time.Unix(1441788476, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

