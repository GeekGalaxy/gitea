// Code generated by go-bindata.
// sources:
// static/conf/app.ini
// DO NOT EDIT!

package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x5a\xcd\x73\xe3\x46\x76\xbf\xe3\xaf\xe8\xa1\xe3\x78\x26\xc5\x0f\x7d\x78\x34\xb2\x6c\x25\xa6\x48\x50\xc2\x8a\x5f\x06\x48\xc9\xe3\x29\x15\x06\x02\x9a\x24\x2c\x10\x8d\x41\x03\x92\xb8\x95\x43\x5c\x39\xe4\x9e\x6c\x25\x97\x1c\x92\x43\x2a\x55\x49\x36\xa9\xdc\x76\xb7\x2a\x27\x57\xee\xf6\xff\xe0\xf2\x6e\xfe\x8b\xfc\x5e\x37\x40\x82\x1a\x79\xd6\xbb\xc9\x96\x5d\x22\xd0\x1f\xaf\xfb\xbd\x7e\xef\xf7\x7e\xaf\x31\xef\xb1\xa1\x79\x61\xda\x4c\xfd\x19\x8c\xba\x56\xef\x25\x9b\x9c\x59\x0e\xeb\x59\x7d\xd3\x78\x8f\x8d\xfb\x66\xdb\x31\xd9\xa0\x7d\x6e\xb2\xce\x59\x7b\x78\x6a\x3a\x6c\x34\x64\x9d\x91\x6d\x9b\xce\x78\x34\xec\x5a\xc3\x53\xd6\x99\x3a\x93\xd1\x00\x8d\xc3\x9e\x75\xaa\x67\x1a\x1f\xb3\x76\x92\xb0\xd8\x5b\x72\x96\x2d\xbc\x8c\xc9\x85\xb8\x93\x4c\xc4\x8c\xdf\xf2\x74\xc5\x12\x6f\x8e\x8e\x30\x8b\xb8\xd1\x1e\x8f\xdd\x61\x7b\x60\xb2\x63\x76\x1a\x66\xdc\x3b\xa2\x1f\x26\x79\x7a\x1b\xfa\x9c\xdd\x85\xd9\x82\x79\xcc\xcf\x13\x26\x66\x0c\xdd\x90\xdc\x59\x78\x31\xa6\x63\x54\x38\x63\x2b\x91\xb3\x34\x8f\x59\x24\x7c\x2f\x8a\x56\x86\x3d\x1d\xba\x53\x07\xda\x1c\xb3\x79\x98\x61\xb4\x09\x09\x3c\x65\xb5\x80\xdf\xd6\xea\xac\x96\xa4\x22\xa8\x31\x81\x86\x8c\xcb\x0c\x2d\x01\x9f\x79\x79\x04\x59\x52\x8f\x51\x12\x60\x0a\xda\x10\xde\x0d\xe3\x55\xca\x13\x21\xc3\x4c\xa4\xab\x2b\xc3\x1e\x8d\x26\xec\xd8\x70\x3a\xb6\x35\x9e\xb8\x93\x97\x63\x1a\x76\xed\xc9\x05\xc6\xd1\x9e\x79\x7a\x65\x8c\xed\xd1\x64\xd4\x19\xf5\xd1\xb3\xc8\xb2\xc4\xe8\x8e\x06\x6d\x6b\x88\x37\xb5\xc7\x85\x90\x99\x12\xe3\x4e\x6d\x1a\xf2\xfe\xd3\x72\xfc\x33\x79\xd4\x6a\xbd\xff\x54\x0f\xc7\xcb\xfb\x4f\xcf\x26\x93\xb1\x3b\x1e\xd9\x93\x67\xb2\x65\xa8\x97\x76\xb7\x0b\xd5\x8c\x75\x07\x04\xec\xef\xec\xec\x40\xcf\x6e\x28\xbd\xeb\x88\x33\xc7\x39\x63\x33\xee\x65\x79\x0a\xeb\x2d\x78\xcc\x62\x91\x31\xef\xd6\x0b\x23\xea\x36\xba\x96\xd3\x3e\xe9\x9b\x2e\x0d\x3b\x66\x33\x2f\x92\xdc\xc0\x73\x29\x6c\x6f\xaf\x22\xaa\xd3\x1d\xd2\x79\xc5\x2c\x8c\x4b\xc3\x2d\x45\xc0\x8d\x51\xaf\xd7\xb7\x86\x66\x69\x25\x2d\xa4\x14\x6c\x8f\xa6\x13\xd3\x76\xfb\xa3\xd3\x75\xd7\xc7\xec\x94\xc7\x3c\xf5\x32\xce\x64\xc6\x13\x79\x84\x96\x3f\x62\x7e\x00\x37\xc8\x16\xad\x4c\xb4\xe6\x74\xf0\x2d\x3f\x97\x99\x58\xb6\xc8\x66\x52\x8d\x68\xea\x0e\xe6\xf3\x34\x63\x0d\xdf\x3b\xce\xd2\x9c\xb3\x46\x90\x43\x54\x28\xe2\xe3\xc3\x17\x07\x3b\x8b\x9d\xe5\x8e\x64\x0d\xb2\xea\xf1\x72\x45\x3f\x4d\x7e\xef\x2d\x93\x88\x37\x7d\xb1\x34\x3e\x86\xa0\x51\xca\x66\xa9\x58\xc2\x8d\x9a\xc9\xec\x9e\xcd\x42\xa8\xc6\xef\x13\x91\x66\x3c\xd0\x3d\xf0\x10\x76\x19\xc6\x01\xf9\x28\x2d\x16\xce\x42\x5f\xef\x56\xc0\x8a\x4f\x03\x01\x29\x64\xc6\x99\x48\xe7\x3c\x63\x99\x28\xe6\xab\x89\x49\x1a\xde\xd2\xe0\x1b\xbe\x7a\xa6\x35\x13\x09\x8f\xa5\x8c\x58\x72\xe3\xcb\xdd\x3d\xd6\x80\xf9\x48\xaa\x5a\xbd\x21\xf2\xac\x78\xe3\x4b\xd6\x88\x05\xa6\xc9\x1f\x37\x0b\x23\xcb\x49\xd4\x21\xe9\x21\xe0\xd2\xe8\x98\xf6\xc4\xa5\xb0\x83\xc1\xab\x36\x6c\x95\xcb\x18\xe7\xe6\xcb\x47\x07\x14\x12\xb1\xfc\x34\x49\x10\x24\x11\x4e\x3b\xd2\x81\x06\x0b\x92\x52\x5e\x1c\xc0\x0a\x30\xb7\xaf\xed\x46\x27\x86\xe1\x95\xa0\x51\x26\x40\x2b\x39\x1b\x8c\xa5\x62\x98\xda\xf9\x3d\xf7\x73\x58\xd8\x70\x26\xed\x89\xd5\x71\x95\xcb\x8f\xdb\x13\xb8\x9d\x46\x87\x88\x6c\x8c\x63\x2c\x56\x3d\xfd\xc2\x1a\x33\x99\x27\x64\x57\xc3\x1c\x2a\x5f\x52\x6d\x1b\x2f\xea\x63\x37\x61\x3c\xd7\xe8\x81\xb3\xc0\x99\xc4\x8d\x48\xcc\xe7\x38\xc7\x1c\xd1\x27\xeb\xcc\xf7\x62\x76\xcd\x59\x6d\x21\x96\x5c\x87\x39\x4e\x2a\xc2\x29\xd6\x8c\x7e\x5b\xc1\x15\xf6\x70\x4a\x86\xa0\x11\x08\xda\xc0\xcb\x3c\xc4\x2f\xbf\xaa\x40\xc5\x72\x25\xdf\x44\x0a\x2c\xe0\x4e\xf3\x94\x4b\x2d\x09\x8d\x50\x6e\x1f\x1d\x61\xf6\x81\x24\xe4\x49\x99\xbf\x10\x80\x29\xa3\x7b\x52\x62\x81\x9a\x6b\x9c\x8d\x1c\x8a\xa6\xdd\xbd\x17\xcd\x1d\xfc\xb7\x7b\xb4\xbf\xbf\x73\x60\x14\x30\xa7\x9c\xda\x28\x40\x2a\x15\x22\x33\xc6\x6d\xc7\xb9\xec\x2a\xc3\xf4\x68\xa5\xca\xba\x71\xb4\xaa\x33\x5e\x62\x98\x0e\x4c\xda\x5a\xca\xdf\xe4\x61\x5a\xe8\x08\xd8\x09\x67\xab\xc6\x2c\x8f\xa2\x1a\xa2\xb9\xbf\xc6\x2f\x3d\xbe\x14\x5b\x2a\xa0\xa4\x1a\xfa\x2c\x18\x19\x40\xc7\x59\x33\xb8\x86\x41\xbc\x60\x19\xc6\x57\x0a\xce\xfc\x3c\x0d\x33\x80\x9e\x35\xc4\x19\xf6\xfb\x88\xe9\xce\x79\xe5\x38\x9e\x3c\xd1\x29\x41\x67\x8c\xc9\x88\x9d\x9b\xe6\x98\xbd\x1c\x4d\x6d\xa6\x94\xeb\xb6\x27\x6d\xe6\xb4\x7b\xe6\x93\x27\x86\x63\x76\x6c\x73\xe2\xc2\x11\x21\xe0\xc9\x7b\x9f\xf6\xba\xe6\xa5\x8d\xff\xff\xf8\x4f\x9e\x92\x37\xe4\x99\xa0\x83\x84\xcb\xa7\x7c\xc9\x97\xd7\x50\x36\xf0\x10\x17\x40\x11\x6b\xe8\xda\xe6\xc0\x1c\x9c\x00\x54\xba\xed\x97\x0e\xe6\xbf\x30\x3a\xa3\xd1\xb9\x65\x2a\xa0\xaf\x1a\xd5\xf5\xee\xb8\xa4\x73\x2d\xfa\xd7\x13\xb7\x06\x85\xb1\x9f\xf2\x20\xd4\x86\xb1\x29\x21\x49\x8a\x62\x71\xbf\x62\x5e\x0e\x43\xc7\x59\xe9\x99\x0b\xee\x05\xd8\x8a\x4a\x63\x88\x0a\xf2\x31\xf5\x62\xd8\x94\x30\x1d\xd3\x05\x74\x7f\xfe\xd2\x6d\x4f\x27\x67\xe6\x10\x4e\x0e\x47\x1f\xad\xd3\xcf\xe7\x8d\x4b\xf3\x84\xba\x1a\xd4\x50\xe4\x07\x38\xcb\x95\xd1\xee\x4c\xac\x0b\xd3\xed\xe0\x90\xdc\x3e\x3d\x0d\xac\x21\x40\x93\x54\xdb\x3d\xdc\x81\x70\xc7\xa4\x50\x21\x9f\xf8\xc1\x41\x08\x59\xb5\x1b\x0e\xdf\x07\x1e\xf9\x22\x9e\x85\xe9\x92\xf1\xc6\x12\x48\xaf\x82\x23\xe5\xf3\x50\x66\x1a\x2a\x21\xf3\xd4\x72\x08\x97\x4d\x24\x97\xbe\xab\x72\xb5\x3d\xa8\x1c\x66\x57\x70\xa9\x53\x45\x14\x89\xbb\x62\x32\x16\x20\x00\x50\x2e\xc1\x60\x34\x85\x08\xbe\x2f\xf2\x38\xd3\x3e\xb4\x06\x7d\x25\xde\x56\xfa\x57\x84\xaa\x2d\x2e\x81\x38\x4c\x86\x73\x95\x46\xb0\xd5\xdb\x90\xdf\x41\xec\x2a\x5b\x20\x96\x9b\xd8\xd9\x67\x53\xcb\x46\x42\xb2\x4e\x87\x38\xeb\x0b\xcb\xbc\xac\x48\xe8\x78\x3e\xf0\x05\xe9\x2b\xf3\xb0\x17\xc9\x92\xd0\xa7\xcc\x56\x02\x44\xa7\xdd\x39\x33\xdd\xf6\x05\x3c\xcd\xae\xcc\x1a\x90\x0d\xa0\x8c\xc6\x71\xd2\xbf\x18\x3f\x1c\x4d\x40\x71\x5c\xb2\x41\x75\x38\xa1\x7c\xc0\x33\xcc\x3a\x52\x29\x9b\x12\x31\x7c\x65\x91\x5f\x53\x12\x69\xcd\xe1\x99\x99\xa4\x1f\xd9\x0a\xa5\xcc\xb9\x6c\xed\x1e\x3c\x2f\x65\xbe\xcb\x17\xd6\x8b\xfc\xd0\xd8\xd1\x0f\x99\xae\x2b\xd4\x69\x40\x7b\xff\x86\xc1\xfc\xe1\x32\x5f\x52\x06\x80\x25\x7f\x5a\xd0\x22\x5f\xa4\xc0\x88\x44\x68\x50\xcc\x56\xc9\x26\x09\xc3\x57\xac\xc1\x74\x40\xf1\x06\xc3\x7e\x01\x43\x9d\x99\x95\xd8\x35\x5e\xdd\xf1\xeb\x85\x10\x37\x84\x7a\x67\xf8\x65\x99\x27\x6f\xd8\x9b\x9c\x23\xbf\x46\x3c\x9e\x03\xe4\x3f\x9b\x9a\x53\x78\x9e\x39\x3c\x55\x30\xb1\x5b\xb0\x0c\x1e\x85\x08\x18\x70\xb7\x25\xa7\x9c\x84\x23\x05\x4e\x60\x0b\xd2\xe8\x9a\xe4\xa6\xb6\x3b\xb1\x06\x26\x38\x00\xe6\x3c\xa7\xd0\x56\xee\x14\xc6\x0a\x4d\x78\x25\xbb\xd2\xa9\x38\xe7\xd6\xd8\x9d\xf4\x1d\x17\xf3\x88\x7a\x6e\xf6\x47\x5e\x4c\x5c\x4a\xdb\xad\x5b\x31\xcc\x49\x3e\x9b\xa9\x54\x45\xbb\xa4\xa8\xf4\x41\x07\x63\x1e\xd5\x61\x1d\x9e\x10\x2b\x84\x9b\x84\x2a\x35\x15\xf4\x30\x10\xf1\x07\xc8\x9e\x31\xf6\x71\x47\x5c\x54\x75\x36\x01\x49\xc3\xae\x7b\x32\xed\xf5\x88\xad\x98\x43\xa5\x23\xe4\x0f\x29\xd8\x01\x9c\xc8\x7f\x2b\xc4\x16\x14\x54\x11\xa5\xc9\xaa\x33\x3d\xf9\x89\xd9\x99\x28\xda\x56\x12\xd7\x67\xb2\xf4\x38\x4d\x00\x89\xee\x2c\x95\x2b\xc9\x65\x96\x34\xe7\xf4\x4c\x6e\x74\xf4\xfc\xf0\x05\xfa\x3e\xfb\xac\xe8\x78\xf3\x46\xb5\xee\x91\x95\x86\x22\xe3\x75\xda\xaf\xca\xa6\xc4\x2c\x38\x4c\xaa\x8f\xb9\xf6\xe1\xc1\x73\x20\xbe\x33\x98\x8c\x1d\xb4\x44\x11\x25\x38\x40\x51\xd0\x44\x7c\xd1\xc9\x03\x9c\xed\x09\xac\x48\xf4\x5a\xcd\xc5\x42\xa4\x7e\x8a\x83\x59\x2e\x21\x08\x6a\x50\x76\xb7\x7b\x1d\x76\xf0\xe1\xce\x47\x4d\x66\xe9\x85\xf4\x7e\xcb\xa4\x2b\x37\x82\x60\x21\xb5\x90\x17\xdd\x01\x85\xd7\xeb\x15\x69\xad\xc2\x10\xcf\xcc\xfe\x88\x88\x8b\x46\x19\xcd\x37\x89\x83\x29\xc4\xf4\x28\xaa\x42\x3a\x2d\x40\x6a\x73\xed\x9b\x6a\xce\x31\xa3\xe0\x56\x5c\x64\x33\x81\x50\x6b\x5b\xe2\x16\x3d\x57\x54\x4d\xae\x00\x4b\x4b\x6c\x05\xe3\x5c\xda\x4f\x01\xed\x9b\x90\xd1\xc9\x50\x29\x58\xe5\x72\xa2\xaa\x73\x93\x8d\x00\x5f\xa4\x15\x1a\x49\x34\x56\x96\x3c\x9a\x35\x08\xa7\x60\xae\xca\x44\xa9\xbd\xb4\xf4\x50\x8d\x6a\xcc\x8f\x42\x28\x55\x1d\x47\x09\xdd\x25\x2a\x66\xf5\x28\xf8\x37\xc4\xf8\x11\x7a\xa6\xbd\xfb\x5d\xfc\xac\x18\xb1\x21\x68\xca\xc1\x34\x8d\x0d\x02\x84\x3d\xb8\x0e\x9d\xe7\xf3\xfd\xbd\xbd\x26\x9b\x90\x0e\x05\xf5\xf9\x92\xe0\x16\x8f\x5c\xb9\xed\x7a\x30\x14\x24\xf5\x6b\xe4\xde\x35\xf6\x89\xea\xfd\xb4\xc2\x94\xff\x94\x6c\xb0\xf4\x32\xa3\x67\xa3\x96\x3b\x2e\x56\x84\x77\xac\x93\x9e\x4a\x05\x89\x27\xe5\x9d\x48\x83\x82\xbe\x6c\x98\x8b\xf1\x4a\x50\xf2\x7c\x3b\x62\x8b\x8e\xa6\xc6\xd3\xb7\xfb\x3b\x7d\x0b\x78\xe9\x5a\x24\xa4\x78\xd6\x64\x41\x95\x59\xa3\xb1\xca\x78\x25\x28\x7b\x49\xd8\xac\x00\x33\xed\xcd\x20\xc4\x2d\x6a\xa9\x47\xb0\x5b\xb1\x8a\x96\xda\x42\x8b\xfe\x88\x14\xf8\x69\x4c\x46\xe7\xe6\xf0\x47\x4e\xf2\x7d\x18\xd0\xcd\x40\xd4\x63\x43\x95\x32\x59\x79\xfa\x61\xa0\xf9\x31\x47\x6a\xcc\xd4\xe1\xa0\xbf\x14\x07\x50\x94\x02\xb6\x0d\x88\xdd\x92\x43\xcb\xe6\x5c\x88\xb9\xb6\x76\x0b\x74\xe3\x4b\xee\x67\x6b\xe3\xa8\x9e\xff\xa3\x71\xee\xee\xee\x0a\x41\x30\x93\x54\xcb\x28\x0d\xc8\x4a\x61\x3c\x13\x4d\xed\x12\x3f\x7a\x38\xf6\x48\x9c\xff\x31\x03\x17\x24\x60\x4b\x25\xa1\x0d\xb6\xa7\xa4\x3c\x6a\xe1\x77\xce\x2a\x0c\x5c\x18\xe4\xcd\x9b\xdf\xd3\x18\xa8\xcf\x5c\xd2\xc0\x25\x15\x14\xdc\xb2\xef\x7e\xf5\xd7\xbf\xf9\xea\x67\x8f\xfa\x49\xea\x25\x8b\x02\x88\x8b\x7d\x34\x77\x7e\x9b\x9b\x3c\x3a\x67\x7b\xf7\x77\x3c\xbc\x16\xbf\xa7\x02\xe0\x5f\x8f\x5a\x1c\x9e\xaf\xc4\x56\xd6\xfd\x2d\x3b\x7d\x7c\xca\x96\x3b\xbf\xf2\x89\x5f\x6d\xd5\x3e\x7c\x29\xd2\x95\xae\x30\x90\x05\x6b\x0a\x39\xa8\x55\x8d\x7c\x70\x5f\x52\x0c\x36\xda\xdd\xf6\x78\xa2\x48\xaf\x6e\x29\x0b\x8e\xa2\xbf\xa8\x62\x4e\x3b\xc8\xa6\xe0\x94\xb7\x5e\x54\xe1\x0d\x5b\x12\x0f\x76\x50\x6c\x40\xd2\x45\x9b\x14\x39\xd8\x29\x05\xe9\xbd\xa8\x68\xab\xee\x05\x02\x62\x44\x91\xa2\xea\x82\x60\x4f\xa3\x1d\x66\xa9\x09\x47\xa0\xc7\x19\xd0\xea\xe6\x38\xf3\x93\x3a\x75\x1e\x1f\x1d\xec\xbf\xf8\xa8\x5e\xa2\xd8\xf1\xd2\xf3\xbd\x14\x69\x26\xb8\x3e\xde\xa9\x27\x42\x44\x2e\xd1\xab\x63\x90\x9d\x7a\x18\x44\xdc\x2d\x68\xce\xb1\x66\xdc\xe5\xca\x47\xec\xf5\xa6\xb2\xdb\xdd\xdd\xdb\xdd\x7d\x5d\xa6\x46\x62\xf9\x52\x62\x43\x8f\xdb\x94\xe2\x69\x63\x5b\x6d\xda\xa2\xd8\x7c\xcc\xae\xa0\x89\x17\x56\x77\xdb\xb0\xe3\x54\xdc\x86\x54\x95\x28\xca\x3f\x47\xae\x24\xfd\xa5\xde\x1e\x86\x1c\xa9\x24\xb8\xf0\x6e\x09\xb0\x57\xe5\xa8\x15\xa7\xbb\x30\x5a\x1e\xec\x43\xef\x70\x53\xd0\xa3\xc0\x6c\xce\x9b\xec\xb5\x2a\x05\x8b\x5e\xf9\xfa\x0f\x66\x45\x52\xf8\x88\xcd\x45\x03\xbf\x8d\x20\x25\x3e\xd9\x52\x8d\x2c\x90\x71\xb9\x61\x54\x2e\xe0\x36\xe5\xce\xa8\x4a\x3e\x2a\xd7\xfb\xb4\xdc\xa3\x9b\x11\x09\x79\xbd\x36\x93\x5b\x5c\x41\x16\x45\x6d\xa9\x09\xd6\x74\x0a\x95\x7d\x70\xdd\x90\xeb\x1a\xae\xa8\x11\x0b\xfe\x10\xba\x51\x78\xc3\x5d\x4d\xf5\x31\xc3\xd2\xdc\x91\x18\x42\x69\x2f\xf8\xac\x0a\xad\xc2\x9d\xab\xcc\x44\x87\xb7\x16\x88\x90\x9e\xda\x66\x85\xb1\x9a\xb1\xe2\x4a\x92\x12\x87\x5a\x7f\x6b\x2e\xdd\x69\x95\xe5\x01\xd5\x7d\x5a\x0a\xa6\xab\x8e\xcd\xd6\x11\x3d\x64\xc7\x75\x08\x6d\x09\x39\x04\xaf\xdb\x31\x4e\x3b\x6e\x19\x3d\x8a\x85\x43\x88\xee\xd8\x48\x89\xc2\x19\x57\x72\x1e\x99\xee\x98\x8e\x43\xf5\x6b\xdf\xea\x99\xdb\xf3\x8d\x57\x45\xdd\x45\x5e\x3d\x21\x8a\x1a\x79\x3e\xa7\x62\xae\x68\x57\x06\xdf\xdc\x53\x68\x92\xa5\xfd\xfb\x0d\x6a\x97\xfc\x81\x7f\x17\xfd\x58\xd1\xbe\xb0\x3a\xb4\x4e\x41\x9d\x75\x25\xe7\x4e\xc7\xfd\x51\xbb\xeb\x56\x6f\x28\x74\x09\x28\xd5\xf5\x6f\x18\x73\xc9\xf5\x8d\x8f\x62\x3d\x3e\x4a\x19\x34\xd4\x82\x5c\xc8\x45\x2e\x6a\xc6\xa9\x5d\x08\x72\x46\x53\x5b\xc9\x07\x6a\x2b\x01\x6b\x16\x5a\x0e\xa9\xf0\x14\x2f\xcb\x10\xdd\x20\xcc\x19\xa9\x79\xb9\xe0\x4a\x99\x4d\xab\x54\x8c\x96\xab\xd3\x04\xf9\xee\x6a\x85\x24\x99\xe1\x35\x1d\xd6\xeb\xe2\x18\x37\x67\x37\xa6\x7b\x31\xe2\x96\x15\x21\x0f\x26\x6a\xe5\x36\xdd\xaf\xb7\xee\x65\x2a\x1d\x74\x91\x19\x73\x32\xe9\x92\xca\x55\x55\xa6\x53\xed\x8f\xb2\x4f\x16\x61\x12\x2e\xbd\x39\x6f\x7d\x99\xf0\xf9\x9f\xeb\xc7\x24\x9e\x1b\xed\x7e\x7f\x74\x69\x76\xd5\xfd\x14\xe5\x97\x47\x07\x11\xdb\xbb\xd7\xa5\x25\x78\x32\xc7\x9a\x0a\x1d\xb6\xf7\xba\xbf\x37\x38\x31\x06\xed\xcf\x55\x45\x49\x17\xcf\x7b\xc5\xbc\x38\x57\x37\x36\x98\x49\x93\xa4\x2a\x36\xf2\x24\x12\xde\x03\x2b\xa1\xbe\xa2\xe9\xc4\x74\x1d\x5d\x6e\x19\xaf\xc8\x17\xc9\xdc\x4e\xc2\x7d\x30\x69\xae\x2f\x14\x35\x17\x55\xa6\xa3\x4b\xad\x15\x03\x7c\x24\x74\x9b\x48\x66\xe1\x0f\x6c\x08\x1e\x0c\x10\xde\x2f\x85\x20\xbb\x14\x15\x0d\x86\x23\x50\x50\xae\xab\x83\x6b\x0f\x1d\xab\x53\x67\xd3\x38\xbc\xef\x7a\x54\x6e\xd9\xf9\xf5\xaa\x78\xea\x75\x0e\xf7\xf6\xca\xdf\x2f\xf4\xc3\xf3\x9d\x7a\x29\x7a\xfd\xa0\xbb\xf6\xf7\xf7\x3f\x5a\x3f\x0c\xbd\x58\xd4\xd9\x79\x98\x21\x31\xa0\x5e\x71\x32\x50\xea\xe2\x67\x80\x1a\x2a\x5c\x3f\xfb\xa9\x50\x09\x4c\xbd\xd2\xac\x22\xb9\xa9\xe3\x24\xb6\x42\x2a\x53\x8c\x7a\xd7\x54\x59\x57\xcc\x20\x39\x57\xc8\x43\xec\x43\x44\x5e\x3c\x6f\x8a\x74\xde\x4a\x6e\xe6\x2d\xb2\x5e\xeb\x3d\x3c\x35\x88\x6e\x66\x1e\xf9\x49\x6f\x64\x0f\xda\x3a\x17\x81\xc7\xea\x4f\x16\x9b\x8b\xd7\x32\x27\x15\xf4\xb4\x9a\x94\x28\x9b\xd2\x2f\x55\xa7\x3a\x76\xcb\xcb\xd1\x07\xe1\x5b\xce\x2d\x6b\x21\x54\x99\x1e\x1d\x84\xe4\x89\xa7\x6e\xf9\x97\x18\x19\xa2\xb0\x50\x9f\x0b\x4a\xef\x2c\xa7\xd5\x95\x97\xd4\x8c\xe2\x8e\xb2\x68\xfd\xff\xac\xec\x1f\x14\xf5\xfa\xe6\xa2\x54\x7c\x92\x02\xba\x48\xcd\x2e\xbf\xce\xe7\xf4\x60\xc1\xf6\xf4\x7b\xe9\xa5\x4a\x7f\x33\x4d\x45\x4a\x0f\x9d\x34\xa4\xab\xc0\x87\xd9\x59\x4b\x30\xfa\xe6\x85\x49\x2c\x45\xbd\x1a\x25\x53\x29\x6d\xa3\x54\xd7\x97\x64\x74\x0c\xcd\xa2\xfd\xaa\x9c\xb6\x9e\xa0\x8c\xf1\x70\x34\x35\x6e\x86\x7e\xac\x0b\x3c\x8d\x3c\x92\x2e\x29\x05\xdc\x02\xde\x8d\xa1\x2c\x15\x19\x9e\x9f\xca\x3b\xf2\x40\x15\x83\x82\xa0\x81\x2e\x06\x0a\x6a\xf0\xec\xed\x7c\xd3\x1f\x9d\xba\xf6\x68\xa2\xcb\xd4\x02\xac\x28\x92\x23\x40\x6b\x25\x9c\xe9\x7a\x01\xa7\x48\xbb\xd9\x92\xa1\x6c\xba\xa3\xa3\x99\xbe\x04\x39\xa5\x9d\x95\xa5\xd7\x50\x22\x17\xe1\x2c\x7b\x97\x9c\xbd\x43\x90\x16\x2f\x86\x40\xf6\xc9\x27\x78\xab\xb3\xbd\xe7\x07\x15\x90\x71\x9d\x33\xab\xa7\x3e\x4b\x1d\xaa\x1c\x36\x27\x24\x54\x5a\x07\xa8\x64\x56\x6f\xeb\xd5\x6d\x5b\xfd\x97\x6f\x69\x66\xde\x27\x61\xaa\xb0\x63\x25\x69\x3b\x24\x80\xf6\xf2\x34\xe0\x11\xa7\x2b\xcd\x19\xdd\x74\x2e\xb1\x6d\x1a\xb1\x6d\xae\x17\x6a\x33\xeb\x8b\xe7\xca\x31\xc7\x8f\x9d\x71\x5c\x3d\x35\x9b\x17\x04\x55\xb3\x53\x42\x33\xfd\xf9\xb3\xb0\xc7\x12\x49\x19\x08\xfc\x08\x95\xb0\x4d\x50\x99\xa1\xd9\x99\xb8\xc8\xc7\x03\xa7\xfa\x29\x6d\x82\xf9\x88\xb5\x74\x2d\x5b\x5d\xba\x54\x98\x30\x84\x44\x58\xee\x5d\x52\xab\xe4\xa4\x08\x0b\x70\x3b\x72\xf9\x1c\xe8\xa8\x63\x3f\x0f\x92\x07\x7e\x4f\x43\xaa\x1f\x37\xf1\xae\xae\x0f\x2b\xc4\xbb\xf8\x3c\xb9\xfe\xe0\xa0\x90\xe4\x81\x95\xa8\xb1\x6a\xa5\x77\x5d\xb8\x6d\x6f\xa0\x1b\x7a\xf3\x18\xcb\x85\x7e\x69\xba\xe2\x4e\x88\xc8\x43\xad\x72\x39\xf7\xce\x81\x0f\x6e\xeb\xd6\x77\x5a\xbf\xdb\x7d\x87\x3a\x5d\x4e\xdc\x75\xf3\xd5\x49\x6c\xf2\x73\x81\x79\xaf\x6a\xbb\xd5\x4b\x96\x5a\xbd\xb6\xb7\xf5\x7e\x45\x67\x62\xd2\xb5\xa9\x53\x31\xdb\x1a\x76\x1f\x9a\x6e\xf3\xb1\x6a\x63\xbe\xed\x8f\x56\x6c\xeb\xf3\x91\xd1\xb5\x49\xb6\x1a\x77\x82\x79\x01\x5d\x11\xde\x23\xa9\xe8\xed\x1d\xa9\xaf\x4f\x47\xf4\xe7\xd3\xf5\xb7\x69\xfd\x2d\xe8\xcf\x80\xbd\x29\x18\xeb\x71\x9e\xcd\x0e\x0d\x72\x1b\x95\x50\xd0\x77\xa5\x02\xe2\xd4\x9a\xb8\x5d\xab\xd7\xdb\x0e\x7f\xba\xef\x4d\xe7\xb9\x26\x4b\xe4\xee\x2a\x35\xc0\x8c\x1f\x60\x22\x9b\xfb\x1f\x94\xeb\xd6\x1a\x0d\x6f\x4e\x5b\x94\xb0\x20\xc3\x0b\x20\x8d\xd2\x09\x65\x3a\x95\x0f\x45\xbc\xce\x78\x61\xd6\x90\xfe\x52\xd5\xb0\x81\xf0\xa5\x6a\x98\xfb\xad\xdd\xe6\x8b\xe6\x73\xa2\xbc\x6d\xfb\xb4\x30\x1e\xfd\xc3\x81\x05\xf7\x22\xba\x1b\xa7\x7b\xf3\xa6\xda\x70\x73\x26\xfd\x9b\xab\xb7\xb8\x99\xa9\xbe\x4f\x6a\x5e\xbf\x29\x4a\x17\x22\x4f\x37\xf4\x42\x61\xd4\x87\xcd\x6a\x4d\xba\xf7\xe1\xbb\x95\xa4\xc5\xaa\x6a\xe6\x71\x4a\x74\x4a\x55\x00\x8d\x46\xe6\xcd\xe5\xef\xa2\x27\x49\x2b\x34\x2d\xd5\x7c\x15\xee\x1e\x12\xca\xb4\x87\xf4\x8e\xa4\xd0\x98\x3a\xf5\x9f\x2e\x1a\x9d\x21\xfd\x3d\x3b\xaf\x07\xbc\xd1\x35\xeb\xb3\xb4\xd1\xb3\xeb\x71\xd4\x18\xf6\xeb\xd1\x6d\xa3\x7f\x51\x4f\xf3\x86\x3d\xad\x7f\xe9\x35\x7e\x32\xae\x73\xd9\x30\x9d\x7a\x92\x35\x4e\xec\x7a\x12\x35\xc6\x7d\xf5\x6d\x92\xe4\x99\x40\xa6\x50\x2e\xea\xbf\xfe\xf7\xbf\xf8\xee\xbf\xfe\xe6\xbb\x5f\xfc\xfc\xfb\xbf\xfd\xab\xfa\xaf\x7f\xf9\xd5\xff\xfc\xeb\xcf\x8a\x97\x2e\xcf\x33\xe9\x2f\xea\xbd\xd4\x8b\xbf\xfe\x67\x2f\x94\xf5\x21\x47\x3d\x0a\x5e\x82\x62\xbe\xef\x65\xb7\x21\xff\xef\x7f\xcc\xeb\xdf\xfc\xc3\xb7\x7f\xf9\xed\x57\xdf\x7e\xf5\xcd\xaf\xbe\xf9\xc5\x37\xbf\xac\x7f\xff\x77\xff\xf4\xfd\xdf\xff\xdb\x6f\xfe\xe3\xe7\x75\x53\x26\xde\xd7\xff\x29\xa2\xfa\x18\x14\x2d\x9f\xe7\x5f\xff\x8b\xc4\x63\x24\x6f\x42\xba\x3f\x21\x67\xbe\x32\x9c\xb3\xd1\xa5\xdb\x03\x71\x41\x1a\x3f\xb1\xf5\x87\xdb\x35\x68\xfd\x6f\x00\x00\x00\xff\xff\xcc\x38\x14\xab\xb5\x22\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 8885, mode: os.FileMode(420), modTime: time.Unix(1439680763, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

